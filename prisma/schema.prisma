generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model et_event {
  id         Int           @id @default(autoincrement())
  type       et_event_type @default(marry)
  bf         String?       @db.VarChar(4)
  gf         String?       @db.VarChar(4)
  husband    String?       @db.VarChar(4)
  wife       String?       @db.VarChar(4)
  startTime  String        @db.VarChar(16)
  username   String?       @db.VarChar(4)
  remark     String?       @db.VarChar(20)
  deleted    Boolean       @default(false)
  createTime DateTime      @default(now()) @db.DateTime(0)
  lastUpdate DateTime      @default(now()) @db.DateTime(0)

  @@index([type], map: "type")
}

model et_day_category {
  id         Int                  @id @default(autoincrement())
  type       et_day_category_type @default(menses)
  className  String               @db.VarChar(64)
  name       String               @db.VarChar(64)
  createTime DateTime             @default(now()) @db.Timestamp(0)
  index      Int
}

model et_day_love_moment {
  id                         Int                          @id @default(autoincrement())
  title                      String                       @db.VarChar(64)
  content                    String                       @db.Text
  loves                      Int                          @default(0)
  stars                      Int                          @default(0)
  userId                     Int                          @default(1)
  images                     String                       @db.Text
  public                     Boolean                      @default(false)
  createTime                 DateTime                     @default(now()) @db.Timestamp(0)
  et_day_love_moment_comment et_day_love_moment_comment[]
}

model et_day_love_moment_love_mapping {
  id         Int                                  @id @default(autoincrement())
  userId     Int
  momentId   Int
  type       et_day_love_moment_love_mapping_type @default(love)
  createTime DateTime                             @default(now()) @db.Timestamp(0)
}

model et_day_love_moment_comment {
  id                 Int                @id @default(autoincrement())
  content            String             @db.Text
  userId             Int
  momentId           Int
  createTime         DateTime           @default(now()) @db.Timestamp(0)
  et_day_love_moment et_day_love_moment @relation(fields: [momentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "momentId")
  et_user            et_user            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")

  @@index([momentId], map: "momentId")
  @@index([userId], map: "userId")
}

model et_user {
  id                                                 Int                          @id @default(autoincrement())
  eid                                                String                       @default("") @db.VarChar(32)
  username                                           String                       @default("") @db.VarChar(16)
  avatarUrl                                          String                       @default("") @db.VarChar(256)
  sex                                                Int                          @default(0)
  openid                                             String                       @default("") @db.VarChar(64)
  country                                            String                       @default("") @db.VarChar(16)
  province                                           String                       @default("") @db.VarChar(16)
  city                                               String                       @default("") @db.VarChar(16)
  district                                           String                       @default("") @db.VarChar(16)
  exps                                               Int                          @default(0)
  loves                                              Int                          @default(0)
  subs                                               Int                          @default(0)
  birthday                                           String                       @default("") @db.VarChar(16)
  desc                                               String                       @default("") @db.VarChar(512)
  createTime                                         DateTime                     @default(now()) @db.Timestamp(0)
  et_chat                                            et_chat[]
  et_day_love_moment_comment                         et_day_love_moment_comment[]
  et_user_relation_et_user_relation_userId1Toet_user et_user_relation[]           @relation("et_user_relation_userId1Toet_user")
  et_user_relation_et_user_relation_userId2Toet_user et_user_relation[]           @relation("et_user_relation_userId2Toet_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model city {
  CITY_ID       Int       @id @default(autoincrement())
  CITY_CODE     String    @db.VarChar(40)
  CITY_NAME     String    @db.VarChar(40)
  SHORT_NAME    String    @db.VarChar(20)
  PROVINCE_CODE String?   @db.VarChar(40)
  LNG           String?   @db.VarChar(20)
  LAT           String?   @db.VarChar(20)
  SORT          Int?
  GMT_CREATE    DateTime? @db.DateTime(0)
  GMT_MODIFIED  DateTime? @db.DateTime(0)
  MEMO          String?   @db.VarChar(250)
  DATA_STATE    Int?
  TENANT_CODE   String?   @db.VarChar(32)

  @@index([CITY_CODE, TENANT_CODE], map: "Index_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model district {
  AREA_ID      Int       @id @default(autoincrement())
  AREA_CODE    String    @db.VarChar(40)
  CITY_CODE    String?   @db.VarChar(40)
  AREA_NAME    String    @db.VarChar(40)
  SHORT_NAME   String    @db.VarChar(20)
  LNG          String?   @db.VarChar(20)
  LAT          String?   @db.VarChar(20)
  SORT         Int?
  GMT_CREATE   DateTime? @db.DateTime(0)
  GMT_MODIFIED DateTime? @db.DateTime(0)
  MEMO         String?   @db.VarChar(250)
  DATA_STATE   Int?
  TENANT_CODE  String?   @db.VarChar(32)

  @@index([AREA_CODE, TENANT_CODE], map: "Index_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model province {
  PROVINCE_ID   Int       @id @default(autoincrement())
  PROVINCE_CODE String    @db.VarChar(40)
  PROVINCE_NAME String    @db.VarChar(50)
  SHORT_NAME    String    @db.VarChar(20)
  LNG           String?   @db.VarChar(20)
  LAT           String?   @db.VarChar(20)
  SORT          Int?
  GMT_CREATE    DateTime? @db.DateTime(0)
  GMT_MODIFIED  DateTime? @db.DateTime(0)
  MEMO          String?   @db.VarChar(250)
  DATA_STATE    Int?
  TENANT_CODE   String?   @db.VarChar(32)

  @@index([PROVINCE_CODE, TENANT_CODE], map: "Index_1")
}

model et_chat {
  id         Int      @id @default(autoincrement())
  sendId     Int
  recvId     Int
  content    String   @default("") @db.VarChar(128)
  createTime DateTime @default(now()) @db.Timestamp(0)
  et_user    et_user  @relation(fields: [recvId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "recvId")

  @@index([recvId], map: "sendId")
}

model et_user_relation {
  id                                        Int                   @id @default(autoincrement())
  userId1                                   Int
  userId2                                   Int
  type                                      et_user_relation_type @default(friend)
  createTime                                DateTime              @default(now()) @db.Timestamp(0)
  et_user_et_user_relation_userId1Toet_user et_user               @relation("et_user_relation_userId1Toet_user", fields: [userId1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId1")
  et_user_et_user_relation_userId2Toet_user et_user               @relation("et_user_relation_userId2Toet_user", fields: [userId2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId2")

  @@index([userId1], map: "userId1")
  @@index([userId2], map: "userId2")
}

enum et_event_type {
  marry
  love
  birthday
  menses
}

enum et_day_category_type {
  menses
  love
  marry
  birthday
  deathday
}

enum et_day_love_moment_love_mapping_type {
  love
  star
}

enum et_user_relation_type {
  friend
  love
  marry
}
